# Generated by Django 3.1.1 on 2020-10-04 13:33
from django.db import migrations
from django.db import IntegrityError, transaction
from esi_players.models import Player, Team, Images , PlayerTeam, Region, Country, Map, Tournament
import json


def add_countries(apps, schema_editor):
    try:
        with transaction.atomic():
            with open("esi_players/data/country_seed.json") as json_file:
                countries = json.load(json_file)
                for c in countries:
                    country = Country()
                    country.country_id = c['id']
                    country.name = c['name']
                    country.short_name = c['short_name']
                    imgs = Images()
                    imgs.default = c['images']['default']
                    imgs.thumbnail = c['images']['thumbnail']
                    imgs.save()
                    country.images = imgs
                    country.region = Region.objects.get(region_id=c['region'])
                    country.save()
    except IntegrityError:
        raise IntegrityError("Country Error")


def add_tournaments(apps, schema_editor):
    try:
        with transaction.atomic():
            with open("esi_players/data/tournaments.json") as json_file:
                tournaments = json.load(json_file)
                for t in tournaments:
                    tournament = Tournament()
                    tournament.tournament_id = t['id']
                    tournament.title = t['title']
                    tournament.tier = t['tier']
                    tournament.start = t['start']
                    tournament.end = t['end']
                    tournament.short_title = t['short_title']
                    tournament.save()

    except IntegrityError:
        raise IntegrityError("Tournament Error")


def add_players(apps, schema_editor):
    try:
        with transaction.atomic():
            with open("esi_players/data/player_seed.json") as json_file:
                players = json.load(json_file)
                for p in players:
                    player = Player()
                    player.player_id = p['id']
                    player.ign = p['nick_name']
                    player.first_name = p['first_name']
                    player.last_name = p['last_name']
                    player.country = Country.objects.get(country_id=p['country'])
                    imgs = Images()
                    imgs.default = p['images']['default']
                    imgs.thumbnail = p['images']['thumbnail']
                    imgs.save()
                    player.images = imgs
                    player.save()

    except IntegrityError:
        raise IntegrityError("Player Error")


def add_teams(apps, schema_editor):
    try:
        with transaction.atomic():
            with open("esi_players/data/team_seed.json") as json_file:
                teams = json.load(json_file)
                for t in teams:
                    team = Team()
                    team.team_id = t['id']
                    team.name = t['name']
                    team.short_name = t['short_name']
                    team.country = Country.objects.get(country_id=t['country'])
                    imgs = Images()
                    imgs.default = t['images']['default']
                    imgs.thumbnail = t['images']['default']
                    imgs.save()
                    team.images = imgs
                    team.save()

    except IntegrityError:
        raise IntegrityError("Team Error")


def add_team_roster(apps, schema_editor):
    try:
        with transaction.atomic():
            with open("esi_players/data/playerRoster_seed.json") as json_file:
                teamroster = json.load(json_file)
                for tr in teamroster:
                    teamplayer = PlayerTeam()
                    teamplayer.team = Team.objects.get(team_id=tr['Team'])
                    teamplayer.player = Player.objects.get(player_id=tr['Player'])
                    teamplayer.save()
    except IntegrityError:
        raise IntegrityError("Roster Error")


class Migration(migrations.Migration):

    dependencies = [
        ('esi_players', '0005_auto_20201004_1433'),
    ]

    operations = [
        migrations.RunPython(add_countries),
        migrations.RunPython(add_tournaments),
        migrations.RunPython(add_teams),
        migrations.RunPython(add_players),
        migrations.RunPython(add_team_roster)
    ]
